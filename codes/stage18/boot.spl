//Disk Controller Interrupt Routine
loadi (6, 19);
loadi (7, 20);

//Initialize the STATUS field in the Disk Status Table to 0
[DISK_STATUS_TABLE + 0] = 0;

//interrupt routine 9
loadi(20, 33);
loadi(21, 34);

//module 1, Process Manager
loadi(42, 55);
loadi(43, 56);

//module 2, Memory Manager
loadi(44, 57);
loadi(45, 58);

//inode table
loadi (59, 3);
loadi (60, 4);


//Initialize the memory free list with value 1 for pages used and 0 for free pages
alias it R1;

it = 0;
while (it < 83) do
    [MEMORY_FREE_LIST + it] = 1;
    it = it + 1;
endwhile;

it = 83;                  //user page starting
while (it < 128) do
    [MEMORY_FREE_LIST + it] = 0;
    it = it + 1;
endwhile;   

[SYSTEM_STATUS_TABLE + 3] = 0; 
[SYSTEM_STATUS_TABLE + 2] = 45; 


//Module 0
loadi(40, 53);
loadi(41, 54);

//console interrupt handler
loadi(8, 21);
loadi(9, 22);

//INT 6
loadi(14, 27);
loadi(15, 28);

//Module 4
loadi(48, 61);
loadi(49, 62);

//Initialize the STATUS field in the Terminal Status table as 0. 
//This will indicate that the terminal is free before scheduling the first process.
[TERMINAL_STATUS_TABLE] = 0;

//INIT program
loadi(65, 7);
loadi(66, 8);

//exec program
//loadi(84, 69);

//INT=10 routine
loadi(22, 35);
loadi(23, 36);

//INT=7 routine
loadi(16, 29);
loadi(17, 30);

//exception handler
loadi(2, 15);
loadi(3, 16);

//timer interrupt handler
loadi(4, 17);
loadi(5, 18);

//library
loadi(63, 13);
loadi(64, 14);

//scheduler
loadi(50,63);
loadi(51,64);

//Set the Page Table for the INIT program (pid = 1)
PTBR = PAGE_TABLE_BASE + 20;
PTLR = 10;

//Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//Heap
[PTBR+4] = 78;
[PTBR+5] = "0110";
[PTBR+6] = 79;
[PTBR+7] = "0110";

//Code
[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = 66;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 76;
[PTBR+17] = "0110";
[PTBR+18] = 77;
[PTBR+19] = "0110";

//Store the IP in the top of the user stack and setting the SP
[76 * 512] = [65 * 512 + 1];


//Set the process table for the init program
[PROCESS_TABLE + 17] = 1;                       
[PROCESS_TABLE + 20] = CREATED;                 
[PROCESS_TABLE + 27] = 83;                    //User area
[PROCESS_TABLE + 28] = 0;                     //Kernel SP
[PROCESS_TABLE + 29] = 8 * 512;               //User SP
[PROCESS_TABLE + 30] = PAGE_TABLE_BASE + 20;    
[PROCESS_TABLE + 31] = 10;                      


// Initialize the per-process resource table of init process.
alias iter R9;
iter = 83 * 512 + 512 - 16;
while (iter < (83 * 512 + 512)) do
    [iter] = -1;
    iter = iter + 1;
endwhile;

//Set the process state of all the other processes in the process table to "TERMINATED"
alias itr R0;
itr = 2;
while(itr < MAX_PROC_NUM) do
    [PROCESS_TABLE + itr * 16 + 4] = TERMINATED;
    itr = itr + 1;
endwhile;


return;
