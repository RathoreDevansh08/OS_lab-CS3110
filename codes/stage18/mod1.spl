//Process Manager Module

alias funcNum R1;
alias pid R2;
alias retVal R0;

//Function corresponding to Free User Area Page	
if (funcNum == 2) then
    alias userAreaPage R3;
    userAreaPage = [PROCESS_TABLE + pid * 16 + 11];

//Free the user area page by invoking the Release Page function
    multipush(R0, R1, R2, R3);
    R1 = 2;
    R2 = userAreaPage;
    call MOD_2;
    multipop(R0, R1, R2, R3);

    return;
endif;


//Function corrseponding to Exit Process	
if (funcNum == 3) then
    multipush(R0, R1, R2, R3);

//Invoke the Free Page Table function with same PID to deallocate the page table entries
    R1 = 4;
    R2 = pid;
    call MOD_1;
    
//Invoke the Free user Area Page function with the same PID to free the user area page.
    R1 = 2;
    R2 = pid;
    call MOD_1;

    multipop(R0, R1, R2, R3);
    
//Set the state of the process as TERMINATED and return to the caller
    [PROCESS_TABLE + 16 * pid + 4] = TERMINATED;

    return;
endif;


//Function corresponding to Free Page Table	
if (funcNum == 4) then

//Invalidate the page table entries for the library pages by setting page number as -1 and auxiliary data as "0000" for each entry.
    PTBR = PAGE_TABLE_BASE + pid * 20;
    PTLR = 10;
    
    //Library
    [PTBR+0] = -1;
    [PTBR+1] = "0000";
    [PTBR+2] = -1;
    [PTBR+3] = "0000";
`   
    alias it R5;
    it = 2;

// For each valid entry in the page table, release the page by invoking the Release Page function and invalidate the entry
    while (it < PTLR) do 
        if ([PTBR + 2 * it] != -1) then
            multipush(R0, R1, R2, R3, R5);
            R1 = 2;
            R2 = [PTBR + 2 * it];
            call MOD_2;
            multipop(R0, R1, R2, R3, R5);
            [PTBR + 2 * it + 1] = "0000";
        endif;
        it = it + 1;
    endwhile;

    return;

endif;

return;
