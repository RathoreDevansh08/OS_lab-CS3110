//Device Manager Module

alias funcNum R1;
alias currPID R2;


//Function corresponding to Disk Load
if (funcNum == 2) then
    
//Acquires the disk by invoking the Acquire Disk function in the resource manager module (module 0)
    multipush(R0, R1, R2, R3, R4);
    R1 = 3;
    R2 = currPID;
    call MOD_0;
    multipop(R0, R1, R2, R3, R4);

//Set the Disk Status table entries
    [DISK_STATUS_TABLE + 0] = 1;      //status
    [DISK_STATUS_TABLE + 1] = 0;      //load/store bit
    [DISK_STATUS_TABLE + 2] = R3;     //page number
    [DISK_STATUS_TABLE + 3] = R4;     //block number

//Issue the load statement to initiate a disk block to memory page 
    load(R3, R4);

//Set the state of the process (with given PID) to WAIT_DISK and invoke the scheduler 
    [PROCESS_TABLE + 16 * currPID + 4] = WAIT_DISK;

//invoke the scheduler
    call MOD_5;
 
    return;
endif;


//Function corresponding to Terminal Write
if (funcNum == 3) then
    multipush(R1, R2, R3);
    R1 = 8;
    R2 = currPID;
    call MOD_0;
    multipop(R1, R2, R3);

    print R3;

    multipush(R1, R2, R3);
    R1 = 9;
    R2 = currPID;
    call MOD_0;
    alias ret_val R0; 
    multipop(R1, R2, R3);
    return;
endif;


//Function corresponding to Terminal Read
if (funcNum == 4) then
    multipush(R1, R2, R3);
    R1 = 8;
    R2 = currPID;
    call MOD_0; // Call resource manager module.
    multipop(R1, R2, R3);

    read;

//Change the state of the current process to WAIT_TERMINAL.
    [PROCESS_TABLE + 16 * currPID + 4] = WAIT_TERMINAL;


    multipush(R1, R2, R3);
    call MOD_5; 
    multipop(R1, R2, R3);
    R3 = [PTBR + 2 * (R3 / 512)] * 512 + (R3 % 512);
    
//Store the value present in input buffer field of process table to the obtained physical address of the word
    [R3] = [PROCESS_TABLE + currPID * 16 + 8];
    return;

endif;


return;
