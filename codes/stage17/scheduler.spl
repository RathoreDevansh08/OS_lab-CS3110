alias currentPID R0;
currentPID = [SYSTEM_STATUS_TABLE + 1];                        

SP = SP + 1;                                                   
[SP] = BP;                                                     

alias current_process_table R1;
current_process_table = PROCESS_TABLE + 16 * currentPID;       

[current_process_table + 12] = SP % 512;                       
[current_process_table + 14] = PTBR;                           
[current_process_table + 15] = PTLR;                           

alias newPID R1;                                               
newPID = (currentPID % 15) + 1;

alias iter R3;
iter = 0;

while((iter < 16) && ([PROCESS_TABLE + 16 * newPID + 4] != READY && [PROCESS_TABLE + 16 * newPID + 4] != CREATED)) do   //find new PID
    newPID = (newPID % 15) + 1;
    iter = iter + 1;
endwhile;

if(iter == 16) then                                             // If no other process is not TERMINATED, then schedule idle
    newPID = 0;
endif;

alias new_process_table R2;
new_process_table = PROCESS_TABLE + 16 * newPID;                

SP = [new_process_table + 11] * 512 + [new_process_table + 12]; 
PTBR = [new_process_table + 14];                                
PTLR = [new_process_table + 15];                                
[SYSTEM_STATUS_TABLE + 1] = newPID;

if([new_process_table + 4] == CREATED) then                     

    SP = [new_process_table + 13];                              
    [new_process_table + 4] = RUNNING;                          
    [new_process_table + 9] = 0;                                
    ireturn;
endif;

[new_process_table + 4] = RUNNING;                              

BP = [SP];                                                      
SP = SP - 1;                                                    

return;
