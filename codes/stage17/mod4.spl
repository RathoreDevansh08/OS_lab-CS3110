// Device Manager Module

alias funcNum R1;
alias currPID R2;

// Store the function number 8 in register R1 and PID of the curr
// the System Status table in register R2 (Can use currPID, as
// it already contain current PID value).

// Terminal Write
if (funcNum == 3) then
    multipush(R1, R2, R3);
    R1 = 8;
    R2 = currPID;
    call MOD_0;
    multipop(R1, R2, R3);

    print R3;

    multipush(R1, R2, R3);
    R1 = 9;
    R2 = currPID;
    call MOD_0;
    alias ret_val R0; 
    multipop(R1, R2, R3);
    return;
endif;

// Terminal Read
if (funcNum == 4) then
    multipush(R1, R2, R3);
    R1 = 8;
    R2 = currPID;
    call MOD_0; // Call resource manager module.
    multipop(R1, R2, R3);

    read;

    // Change the state of the current process to WAIT_TERMINAL.
    [PROCESS_TABLE + 16 * currPID + 4] = WAIT_TERMINAL;


    multipush(R1, R2, R3);
    call MOD_5; // Invoke the scheduler.
    multipop(R1, R2, R3);
    R3 = [PTBR + 2 * (R3 / 512)] * 512 + (R3 % 512);
    
    // Store the value present in input buffer field of process table to the obtained physical address of the word
    [R3] = [PROCESS_TABLE + currPID * 16 + 8];
    return;

endif;


return;
