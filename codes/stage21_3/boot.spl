loadi(59, 3);                       

loadi(61, 2);                       

loadi(50, 63);                      
loadi(51, 64);

loadi(40, 53);                      
loadi(41, 54);

loadi(42, 55);                      
loadi(43, 56);

loadi(44, 57);                      
loadi(45, 58);

loadi(48, 61);                      
loadi(49, 62);

loadi(14, 27);                      
loadi(15, 28);

loadi(16, 29);                      
loadi(17, 30);

loadi(18, 31);                      
loadi(19, 32);

loadi(20, 33);                      
loadi(21, 34);

loadi(22, 35);                      
loadi(23, 36);

loadi(24, 37);                      
loadi(25, 38);

loadi(32, 45);                      
loadi(33, 46);

loadi(4, 17);                       
loadi(5, 18);

loadi(8, 21);                       
loadi(9, 22);

loadi(6, 19);                       
loadi(7, 20);

loadi(2, 15);                       
loadi(3, 16);

loadi(63, 13);                      
loadi(64, 14);

loadi(65, 7);                       
loadi(66, 8);

loadi(83, 69);                      // Load second process

loadi(89, 70);                      // Load third process

// Mark the used memory pages in the memory free list
alias i R3;
i = 0;
while(i < MAX_MEM_PAGE) do          // Initially mark all of them as used
    [MEMORY_FREE_LIST + i] = 1;
    i = i + 1;
endwhile;

i = 76;
while(i <= 127) do                  // Then mark all the user - allowed pages as unused
    [MEMORY_FREE_LIST + i] = 0;
    i = i + 1;
endwhile;

[SYSTEM_STATUS_TABLE + 2] = 52;     // Store the number of free pages (MEM_FREE_COUNT)
[SYSTEM_STATUS_TABLE + 3] = 0;      // There are no processes waiting for memory (WAIT_MEM_COUNT)

alias page_table R0;
alias process_table R1;

// Setting up Page Table of INIT

page_table = PAGE_TABLE_BASE + 20;

[page_table + 0] = 63;              
[page_table + 1] = "0100";
[page_table + 2] = 64;
[page_table + 3] = "0100";

[page_table + 4] = 78;              
[page_table + 5] = "0110";
[page_table + 6] = 79;
[page_table + 7] = "0110";

[page_table + 8] = 65;              
[page_table + 9] = "0100";
[page_table + 10] = 66;
[page_table + 11] = "0100";
[page_table + 12] = -1;
[page_table + 13] = "0000";
[page_table + 14] = -1;
[page_table + 15] = "0000";

[page_table + 16] = 76;             
[page_table + 17] = "0110";
[page_table + 18] = 77;
[page_table + 19] = "0110";

// Setting up process table entry of INIT

process_table = PROCESS_TABLE + 16;

[process_table + 1] = 1;            
[process_table + 13] = 8 * 512;     
[process_table + 12] = 0;           
[process_table + 14] = page_table;  
[process_table + 15] = 10;          
[process_table + 11] = 80;          
[process_table + 4] = CREATED;      

[76 * 512] = [65 * 512 + 1];        

[MEMORY_FREE_LIST + 76] = 1;        // Set all the memory pages used to 1 in the memory free list
[MEMORY_FREE_LIST + 77] = 1;
[MEMORY_FREE_LIST + 78] = 1;
[MEMORY_FREE_LIST + 79] = 1;
[MEMORY_FREE_LIST + 80] = 1;
[SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] - 5;  // Subtract the number of pages used by INIT

// Initialize disk map table of INIT
i = 2;
while(i <= 9) do                        // Set block numbers corresponding to all pages of INIT as -1
    [DISK_MAP_TABLE + 10 + i] = -1;
    i = i + 1;
endwhile;
[DISK_MAP_TABLE + 10 + 4] = 7;   // First code page lies in block 7 of the disk
[DISK_MAP_TABLE + 10 + 5] = 8;   // Second code page lies in block 8

alias proc R2;
proc = 2;

while(proc < 16) do                 // Set state of all other processes to TERMINATED
    [PROCESS_TABLE + 16 * proc + 4] = TERMINATED;
    proc = proc + 1;
endwhile;

//////////////////////////////////////////////////////
proc = 0;

while(proc < 16) do
	[PROCESS_TABLE + 16 * proc ] = 0;
    proc = proc + 1;
endwhile;
//////////////////////////////////////////////////////

[TERMINAL_STATUS_TABLE] = 0;       
[DISK_STATUS_TABLE] = 0;            

alias perProcRecOff R3;
perProcRecOff = 494;

while(perProcRecOff < 512) do

    [[process_table + 11] * 512 + perProcRecOff] = -1;
    [[process_table + 11] * 512 + perProcRecOff + 1] = -1;
    perProcRecOff = perProcRecOff + 2;

endwhile;

return;
