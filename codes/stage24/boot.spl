//Library Code
loadi(63,13);
loadi(64,14);

//int4
loadi(10, 23);
loadi(11, 24);

//int5
loadi(12, 25);
loadi(13, 26);

//int15
loadi(32, 45);
loadi(33, 46);

//int11
loadi(24, 37);
loadi(25, 38);

//int13
loadi(28, 41);
loadi(29, 42);

//int14
loadi(30, 43);
loadi(31, 44);

//int8
loadi(18, 31);
loadi(19, 32);

//int10
loadi(22,35);
loadi(23,36);

//int6
loadi(14,27);
loadi(15,28);

//int9
loadi(20,33);
loadi(21,34);

//int7
loadi(16,29);
loadi(17,30);

//Disk Free List
loadi(61, 2);

//Init - odd 
loadi(65,7);
loadi(66,8);

//Inode Table
loadi(59,3);
loadi(60,4);

//Disk Controller Interrupt
loadi(6,19);
loadi(7,20);

//mod0
loadi(40,53);
loadi(41,54);

//mod1
loadi(42,55);
loadi(43,56);

//mod2
loadi(44,57);
loadi(45,58);

//mod3
loadi(46,59);
loadi(47,60);

//mod4
loadi(48,61);
loadi(49,62);

//mod5
loadi(50,63);
loadi(51,64);

//Console Interrupt Handler
loadi(8,21);
loadi(9,22);

//Exception Handler
loadi(2, 15);
loadi(3, 16);

//Timer Interrupt Module
loadi(4, 17);
loadi(5, 18);



PTBR = PAGE_TABLE_BASE + 20;
PTLR = 10;

//Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//Heap
[PTBR+4] = 78;
[PTBR+5] = "0110";
[PTBR+6] = 79;
[PTBR+7] = "0110";

//Code
[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = 66;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 76;
[PTBR+17] = "0110";
[PTBR+18] = 77;
[PTBR+19] = "0110";


[PROCESS_TABLE + 11 + 16] = 80;
[PROCESS_TABLE + 1 + 16] = 1;
[PROCESS_TABLE + 3 + 16] = 1;
[PROCESS_TABLE + 4 + 16] = CREATED;
[PROCESS_TABLE + 12 + 16] = 0;
[PROCESS_TABLE + 13 + 16] = 8 * 512;
[PROCESS_TABLE + 14 + 16] = PTBR;
[PROCESS_TABLE + 15 + 16] = PTLR;


//Disk Map Table for INIT program
[DISK_MAP_TABLE + 0 + 10] = -1;
[DISK_MAP_TABLE + 1 + 10] = -1;
[DISK_MAP_TABLE + 2 + 10] = -1;
[DISK_MAP_TABLE + 3 + 10] = -1;
[DISK_MAP_TABLE + 3 + 10] = 7;
[DISK_MAP_TABLE + 4 + 10] = 8;
[DISK_MAP_TABLE + 5 + 10] = -1;
[DISK_MAP_TABLE + 6 + 10] = -1;
[DISK_MAP_TABLE + 7 + 10] = -1;
[DISK_MAP_TABLE + 8 + 10] = -1;
[DISK_MAP_TABLE + 9 + 10] = -1;

[76 * 512] = [65 * 512 + 1];


//Initializing STATE field of other table entries to TERMINATED
alias id R0;
id = 2;
while (id < 16) do
	[PROCESS_TABLE + 4 + 16 * id] = TERMINATED;
	id = id + 1;
endwhile;


//Memory Free List initialization
id = 0;
while (id < 83) do
	[MEMORY_FREE_LIST + id] = 1;
	id = id + 1;
endwhile;


[SYSTEM_STATUS_TABLE + 2] = 128 - id;

while (id < 128) do
	[MEMORY_FREE_LIST + id] = 0;
	id = id + 1;
endwhile;

//Per Process Resource Table initialization
alias per R1;
per = 81 * 512 - 1;
id = 0;
while (id < 8) do
	[per - 1] = -1;
	[per] = 0;
	per = per - 2;
	id = id + 1;
endwhile;

//File Status Table initialization
id = 0;
while (id < MAX_FILE_NUM) do
	[FILE_STATUS_TABLE + id * 4] = -1;
	[FILE_STATUS_TABLE + id * 4 + 1] = -1;
	id = id + 1;
endwhile;

//Buffer Table initialization
id = 0;
while (id < MAX_BUFFER) do
	[BUFFER_TABLE + id * 4] = -1;
	[BUFFER_TABLE + id * 4 + 1] = 0;
	[BUFFER_TABLE + id * 4 + 2] = -1;
	id = id + 1;
endwhile;

//Open File Table initialization
id = 0;
while (id < MAX_OPENFILE_NUM) do
	[OPEN_FILE_TABLE + id * 4] = -1;
	[OPEN_FILE_TABLE + id * 4 + 2] = -1;
	[OPEN_FILE_TABLE + id * 4 + 3] = -1;
	[OPEN_FILE_TABLE + id * 4 + 1] = 0;
	id = id + 1;
endwhile;

//Disk Status
[DISK_STATUS_TABLE] = 0;

[SYSTEM_STATUS_TABLE + 3] = 0;
//Terminal Initialization

[TERMINAL_STATUS_TABLE] = 0;
return;
